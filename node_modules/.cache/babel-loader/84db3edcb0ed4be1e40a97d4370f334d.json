{"ast":null,"code":"var _jsxFileName = \"/Users/yinkarobert/Documents/form/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: invalidName,\n    valueChangeHandler: nameChangeHandler,\n    valueBlurHandler: nameInputBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false); //Check for Entered Email\n\n  const enteredEmailIsValid = enteredEmail.trim().includes('@');\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    if (!enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    resetNameInput();\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = invalidName ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: invalidName && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: enteredEmailIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Enter a valid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disable: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"70WZOxcSSdKhPf2NRzCoopEsXzw=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/yinkarobert/Documents/form/src/components/SimpleInput.js"],"names":["React","useState","useEffect","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","invalidName","valueChangeHandler","nameChangeHandler","valueBlurHandler","nameInputBlurHandler","reset","resetNameInput","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","enteredEmailIsInvalid","formIsValid","emailInputChangeHandler","event","target","emailInputBlurHandler","submitHandler","preventDefault","console","log","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport '../index.css';\n\nconst SimpleInput = (props) => {\n\n    const {\n        value: enteredName,\n        isValid: enteredNameIsValid,\n        hasError: invalidName,\n        valueChangeHandler: nameChangeHandler,\n        valueBlurHandler: nameInputBlurHandler,\n        reset: resetNameInput\n    } = useInput(value => value.trim() !== '');\n\n\n    const [enteredEmail, setEnteredEmail] = useState('');\n    const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n\n    //Check for Entered Email\n    const enteredEmailIsValid = enteredEmail.trim().includes('@');\n    const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n    let formIsValid = false;\n\n    if(enteredNameIsValid && enteredEmailIsValid){\n        formIsValid = true;\n    }\n\n\n\n    const emailInputChangeHandler = event => {\n        setEnteredEmail(event.target.value);\n    }\n\n    const emailInputBlurHandler = event => {\n        setEnteredEmailTouched(true);\n    }\n\n    const submitHandler = event => {\n        event.preventDefault();\n\n        setEnteredEmailTouched(true);\n\n        if(!enteredNameIsValid){\n            return;\n        }\n\n        if(!enteredEmailIsValid){\n            return;\n        }\n\n        console.log(enteredName);\n\n        resetNameInput();\n\n        setEnteredEmail('');\n        setEnteredEmailTouched(false);\n    };\n\n\n    const nameInputClasses = invalidName ? 'form-control invalid' : 'form-control';\n    const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n            type='text'\n            id='name'\n            onChange={nameChangeHandler}\n            onBlur={nameInputBlurHandler}\n            value={enteredName}\n        />\n      </div>\n        <p>{invalidName && <p className=\"error-text\">Name must not be empty</p>}</p>\n\n        <div className={emailInputClasses}>\n            <label htmlFor='email'>Your Email</label>\n            <input\n                type='email'\n                id='email'\n                onChange={emailInputChangeHandler}\n                onBlur={emailInputBlurHandler}\n                value={enteredEmail}\n            />\n        </div>\n        <p>{enteredEmailIsInvalid && <p className=\"error-text\">Enter a valid email</p>}</p>\n      <div className=\"form-actions\">\n        <button disable={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}