{"ast":null,"code":"var _jsxFileName = \"/Users/yinkarobert/Documents/form/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const [emailError, setEmailError] = useState(''); //Check for Valid Input\n\n  const enteredNameIsValid = enteredName.trim() !== ''; //No entered name and Input not touched\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; //Check for Entered Email\n\n  const enteredEmailIsValid = enteredEmail.trim() !== '';\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched; //Check for Valid Email\n\n  const emailIsValid = enteredEmail.trim().includes('@');\n  const emailIsInvalid = !emailIsValid && enteredEmailTouched;\n\n  if (enteredEmailIsInvalid) {\n    setEmailError('Email cannot be empty');\n  }\n\n  if (emailIsValid) {\n    setEmailError('Invalid Email! Email should include @');\n  }\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    if (!enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInvalid = enteredEmailIsInvalid || emailIsInvalid;\n  const emailInputClasses = emailInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorEmail && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: errorEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disable: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"awnXP0nTv+m7lVss1r05TmyHZeU=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/yinkarobert/Documents/form/src/components/SimpleInput.js"],"names":["React","useState","useEffect","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","emailError","setEmailError","enteredNameIsValid","trim","nameInputIsInvalid","enteredEmailIsValid","enteredEmailIsInvalid","emailIsValid","includes","emailIsInvalid","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","emailInputChangeHandler","emailInputBlurHandler","submitHandler","preventDefault","console","log","nameInputClasses","emailInvalid","emailInputClasses","errorEmail"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport '../index.css';\n\nconst SimpleInput = (props) => {\n\n    const [enteredName, setEnteredName] = useState('');\n    const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n    const [enteredEmail, setEnteredEmail] = useState('');\n    const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n    const [emailError, setEmailError] = useState('')\n\n    //Check for Valid Input\n    const enteredNameIsValid = enteredName.trim() !== '';\n    //No entered name and Input not touched\n    const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n    //Check for Entered Email\n    const enteredEmailIsValid = enteredEmail.trim() !== '';\n    const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n    //Check for Valid Email\n    const emailIsValid = enteredEmail.trim().includes('@');\n    const emailIsInvalid = !emailIsValid && enteredEmailTouched;\n\n    if(enteredEmailIsInvalid){\n        setEmailError('Email cannot be empty');\n    }\n\n    if(emailIsValid){\n        setEmailError('Invalid Email! Email should include @');\n    }\n\n    let formIsValid = false;\n\n    if(enteredNameIsValid && enteredEmailIsValid && emailIsValid){\n        formIsValid = true;\n    }\n\n    const nameInputChangeHandler = event => {\n        setEnteredName(event.target.value);\n    }\n\n    const nameInputBlurHandler = event => {\n        setEnteredNameTouched(true);\n    };\n\n\n    const emailInputChangeHandler = event => {\n        setEnteredEmail(event.target.value);\n    }\n\n    const emailInputBlurHandler = event => {\n        setEnteredEmailTouched(true);\n    }\n\n    const submitHandler = event => {\n        event.preventDefault();\n\n        setEnteredNameTouched(true);\n        setEnteredEmailTouched(true);\n\n        if(!enteredNameIsValid){\n            return;\n        }\n\n        if(!enteredEmailIsValid){\n            return;\n        }\n\n        console.log(enteredName);\n\n        setEnteredName('');\n        setEnteredEmail('');\n        setEnteredNameTouched(false);\n        setEnteredEmailTouched(false);\n    };\n\n\n\n    const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n    const emailInvalid = (enteredEmailIsInvalid || emailIsInvalid);\n    const emailInputClasses = emailInvalid ? 'form-control invalid' : 'form-control';\n\n\n\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n            type='text'\n            id='name'\n            onChange={nameInputChangeHandler}\n            onBlur={nameInputBlurHandler}\n            value={enteredName}\n        />\n      </div>\n\n        <div className={emailInputClasses}>\n            <label htmlFor='email'>Your Email</label>\n            <input\n                type='email'\n                id='email'\n                onChange={emailInputChangeHandler}\n                onBlur={emailInputBlurHandler}\n                value={enteredEmail}\n            />\n        </div>\n        <p>{nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}</p>\n        <p>{errorEmail && <p className=\"error-text\">{errorEmail}</p>}</p>\n      <div className=\"form-actions\">\n        <button disable={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}